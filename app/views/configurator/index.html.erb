<% provide(:title,'Configurateur') %>

  <div id="configurator">
    <div class="panel-group" id="accordion">
      <div class="panel panel-default" data-bind="with:data.matiere">  <!-- Matiere -->
        <div class="panel-heading">
          <h4 class="panel-title">
            <a data-toggle="collapse" data-parent="#accordion" href="#matiere">
              Matière
            </a>
          </h4>
        </div>
        <div class="panel-collapse collapse in"  id="matiere">
          <div class="panel-body" data-bind="foreach:$data">
            <label>
              <input type="radio" name="matiere" data-bind="checked: $root.results.matiere, value:id">
              <span data-bind="text:name"></span>
            </label><br>
          </div>
        </div>
      </div>

      <div class="panel panel-default" data-bind="with:data.coloris">  <!-- Coloris -->
        <div class="panel-heading">
          <h4 class="panel-title">
            <a data-toggle="collapse" data-parent="#accordion" href="#coloris">
              Coloris
            </a>
          </h4>
        </div>
        <div class="panel-collapse collapse"  id="coloris">
          <div class="panel-body" data-bind="foreach:$data">
            <label>
              <input type="radio" name="coloris" data-bind="checked: $root.results.coloris, value:id">
              <img class="bordered black" data-bind="attr:{src:image_url,width:47, height:47}"/>
              <span data-bind="text:name"></span>
            </label><br>
          </div>
          <div class="panel-body">
            <label>
              <input type="radio" name="coloris_side" data-bind="checked: $root.results.coloris_side, value:1">
              <span>Votre choix de coloris à l'extérieur et à l'intérieur</span>
            </label><br>
            <label>
              <input type="radio" name="coloris_side" data-bind="checked: $root.results.coloris_side, value:2">
              <span>Votre choix de coloris à l'extérieur, blanc à l'intérieur</span>
            </label><br>
          </div>
        </div>
      </div>

      <div class="panel panel-default" data-bind="with:data.type">  <!-- Type -->
        <div class="panel-heading">
          <h4 class="panel-title">
            <a data-toggle="collapse" data-parent="#accordion" href="#type">
              Type
            </a>
          </h4>
        </div>
        <div class="panel-collapse collapse"  id="type">
          <div class="panel-body" data-bind="foreach:$root.data.type">
            <label>
              <input type="radio" name="type" data-bind="checked: $root.results.type, value:id">
              <img class="bordered black" data-bind="attr:{src:image_url,width:47, height:47}"/>
              <span data-bind="text:name"></span>
            </label><br>
          </div>
        </div>
      </div>

      <div class="panel panel-default">
        <div class="panel-heading">
          <h4 class="panel-title">
            <a data-toggle="collapse" data-parent="#accordion" href="#dimension">
              Dimension
            </a>
          </h4>
        </div>
        <div class="panel-collapse collapse" id="dimension">
          <label>Largeur totale en mm: <input type="text" class="form-control" data-bind="value: $root.data.dimension.width.value">
            <span data-bind="text:$root.range.width.left"></span> - <span data-bind="text:$root.range.width.right"></span>
          </label>
          <label>Hauteur totale en mm: <input type="text" class="form-control" data-bind="value: $root.data.dimension.height.value">
            <span data-bind="text:$root.range.height.left"></span> - <span data-bind="text:$root.range.height.right"></span>
          </label>
        </div>
      </div>
    </div>

    <div class="well" id="total-price">
      Total : <span data-bind="textAsCurrency: results.total"></span>
    </div>
    <button id="add-to-cart" data-bind="click:addToCart" type="button" class="btn btn-primary">Add to cart</button>

  </div>

<% content_for :body_content do %>
    <%= @response.to_json  %>
<% end %>

<% content_for :js do %>
    <script>
        var rawData = JSON.parse(String.removeChangeLine($('#' + static.pageContentId).text()));

        var priceData = function(data, widths, heights){
            var self = this;
            self.data = data || [];
            self.widths = widths || [];
            self.heights = heights || [];
        };

        var localVM = function(){
            var self = this;

            self.data = ko.mapping.fromJS(rawData.data);

            self.priceData = new priceData();
            self.range = {
                width:{
                    left:ko.observable(0),
                    right:ko.observable(0)
                },
                height:{
                    left:ko.observable(0),
                    right:ko.observable(0)
                }
            }
            //self.changeTracker = new ko.dirtyFlag(self.data, false);

            self.results = { // use this to set default values
                matiere: ko.observable('9'),
                coloris: ko.observable(),
                coloris_side: ko.observable('1'),
                type:ko.observable(),
                width:self.data.dimension.width.value,
                height: self.data.dimension.height.value,
                total: ko.observable(0)
            };


            self.addToCart = function(){
                utilities.post(
                        "/line_items.json",
                        {product_info: ko.mapping.toJS( self.results)},
                        function(data){
                            utilities.arrayRange(self.priceData.widths, self.range.width);
                            utilities.arrayRange(self.priceData.heights, self.range.height);
                            console.log('ajax');
                        },
                        function(){alert('KO')});

            }

            ko.computed(function(){
                if(self.results.matiere() && self.results.type()){
                    utilities.post(
                            "/price",
                            {matiere: self.results.matiere(), type: self.results.type()},
                            function(data){
                                self.priceData = new priceData(utilities.splitStringToArray(data.data), utilities.splitStringToArray(data.widths),utilities.splitStringToArray(data.heights));
                                utilities.arrayRange(self.priceData.widths, self.range.width);
                                utilities.arrayRange(self.priceData.heights, self.range.height);
                                console.log('ajax');
                            },
                            function(){alert('KO')});
                }
            });

            ko.computed(function(){
                if(self.results.matiere() && self.results.coloris() && self.results.coloris_side() && self.results.type() && self.results.width() > 0 && self.results.height() > 0){
                    console.log('dd');
                    var i = utilities.b_search(self.priceData.widths, self.results.width());
                    var j = utilities.b_search(self.priceData.heights, self.results.height());
                    if(i != -1 && j != -1){
                        self.results.total(self.priceData.data[(j * self.priceData.widths.length) + i]);
                    }else{
                        self.results.total(0);
                    }
                }

            }).extend({ throttle: 500 });

            /*     ko.computed(function(){
             console.log('dd');
             if(self.changeTracker.isDirty()){
             if(self.results.matiere() && self.results.coloris() && self.results.coloris_side() && self.results.type() && self.results.width() > 0 && self.results.height() > 0){
             utilities.post(
             "/calculate-price",
             {data: ko.mapping.toJS(self.results)},
             function(data){
             self.total(data.data);
             self.changeTracker.reset();
             },
             function(){alert('KO')});
             }
             }
             });*/
        }


        var vm =  new localVM();
        ko.applyBindings(vm, document.getElementById('configurator'));

    </script>
<% end %>